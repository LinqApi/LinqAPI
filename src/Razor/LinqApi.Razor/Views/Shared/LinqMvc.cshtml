@using LinqApi.Dynamic

@model IEnumerable<TableInfo>
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
    var tableInfosJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
}
<div class="container-fluid">
    <div class="row">
        <!-- Left Column: Area Menu -->
        <div class="col-md-3 p-2">
            @await Html.PartialAsync("_Menu", Model)
        </div>
        <!-- Right Column: Query Editor and Grid -->
        <div class="col-md-9 p-2">
            <!-- Saved Queries Toolbar -->
            <div id="savedQueriesBar" class="saved-queries-bar mb-2">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Saved Queries</h5>
                    <button id="btnSaveQuery" class="btn btn-sm btn-outline-primary">Save Query</button>
                </div>
            </div>
            <!-- Query Editor Panel -->
            <div id="queryEditor" class="mb-2">
                <div class="mb-2">
                    <label for="filterInput" class="form-label">Filter</label>
                    <input type="text" id="filterInput" class="form-control" placeholder='e.g., ModifiedDate > "2021-01-01"' />
                </div>
                <div class="mb-1">
                    <label for="groupByInput" class="form-label">Group By</label>
                    <input type="text" id="groupByInput" class="form-control" placeholder='e.g., DepartmentID' />
                </div>
                <div class="mb-1">
                    <label for="orderByInput" class="form-label">Order By</label>
                    <input type="text" id="orderByInput" class="form-control" placeholder='e.g., id' value="id" />
                </div>
                <div class="mb-2">
                    <label for="selectInput" class="form-label">Select</label>
                    <input type="text" id="selectInput" class="form-control" placeholder='e.g., new (Name, Count())' />
                </div>
                <div class="d-flex align-items-center mb-2">
                    <button id="btnApplyQuery" class="btn btn-primary me-2">Apply Query</button>
                    <label for="pageSizeSelect" class="me-2">Page Size:</label>
                    <select id="pageSizeSelect" class="form-select me-2" style="width: auto;">
                        <option value="25" selected>25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                        <option value="250">250</option>
                        <option value="500">500</option>
                    </select>
                    <label for="refreshRate" class="me-2">Refresh (sec):</label>
                    <input type="number" id="refreshRate" class="form-control me-2" style="width: 80px;" value="5" min="1" />
                    <button id="btnStartRefresh" class="btn btn-outline-secondary me-2">Start Refresh</button>
                    <button id="btnStopRefresh" class="btn btn-outline-danger">Stop Refresh</button>
                    <div id="refreshCountdown" class="ms-3 text-muted"></div>
                </div>
            </div>
            <!-- Grid Container -->
            <div id="gridContainer">
                <p>Please select a table from the menu.</p>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script>

        /****************************************************************
         * Global Variables & Configuration
         ****************************************************************/
        var tableInfos = @Html.Raw(tableInfosJson);
        var useIndexDB = true; // For demo, always true.
        var savedQueries = {}; // Saved queries per area (each includes filter, groupBy, select, orderBy, and desc)
        var currentArea = null;
        var currentControllerName = "";
        var currentTableKey = "";
        // Default query payload: default filter is "true" and default order by id descending.
        var currentPayload = {
            filter: "true",
            filterParameters: [],
            groupBy: "",
            select: "",
            pager: { pageNumber: 1, pageSize: 25 },
            orderBy: "id",
            desc: true
        };
        var refreshTimer = null;
        var refreshCountdownTimer = null;

        /****************************************************************
         * Utility Functions
         ****************************************************************/
        function getControllerName(tableKey) {
            var parts = tableKey.split('.');
            if (parts.length > 1) {
                return (parts[0].toLowerCase() === "dbo") ? parts[1] : parts[0] + "_" + parts[1];
            }
            return tableKey;
        }

        /****************************************************************
         * Left Menu Rendering and Events
         ****************************************************************/
        function renderAreaMenu() {
            var areaGroups = {};
            tableInfos.forEach(function(table) {
                if (!areaGroups[table.Area]) {
                    areaGroups[table.Area] = [];
                }
                areaGroups[table.Area].push(table);
            });
            var html = "";
            for (var area in areaGroups) {
                html += '<div class="area-group mb-3" data-area="' + area + '">';
                html += '<div class="area-title" style="cursor: pointer;">' + area.toUpperCase() + ' <span class="toggle-indicator">[-]</span></div>';
                html += '<div class="area-content">';
                html += '<ul class="list-group">';
                areaGroups[area].forEach(function(table) {
                    html += '<li class="list-group-item table-item" data-key="' + table.Key + '" data-area="' + table.Area + '">' + table.DisplayName + '</li>';
                });
                html += '</ul></div></div>';
            }
            $("#areaMenu").html(html);
            attachAreaMenuEvents();
        }

        function attachAreaMenuEvents() {
            $("#globalAreaSearch").on("keyup", function () {
                var val = $(this).val().toLowerCase();
                $(".area-group").each(function () {
                    $(this).toggle($(this).find(".area-title").text().toLowerCase().indexOf(val) > -1);
                });
            });
            $(".area-title").on("click", function () {
                $(this).siblings(".area-content").slideToggle();
                var indicator = $(this).find(".toggle-indicator");
                indicator.text(indicator.text() === "[-]" ? "[+]" : "[-]");
            });
            $(".table-item").on("click", function () {
                $(".table-item").removeClass("active");
                $(this).addClass("active");
                currentTableKey = $(this).data("key");
                currentArea = $(this).data("area");
                currentControllerName = getControllerName(currentTableKey);
                // Set current area name in query editor (if needed)
                // Clear query editor fields
                $("#filterInput").val("");
                $("#groupByInput").val("");
                $("#selectInput").val("");
                // Reset payload – default filter is "true", orderBy is "id" and desc true.
                currentPayload = {
                    filter: "true",
                    filterParameters: [],
                    groupBy: "",
                    select: "",
                    pager: { pageNumber: 1, pageSize: parseInt($("#pageSizeSelect").val()) },
                    orderBy: "id",
                    desc: true
                };
                loadGridData(currentControllerName, currentPayload);
                loadSavedQueries(currentArea);
            });
        }

        /****************************************************************
         * Grid Data Loading and Rendering
         ****************************************************************/
        function loadGridData(controllerName, payload) {
            $("#gridContainer").html('<div>Loading grid data...</div>');
            var url = '/' + currentArea + '/' + controllerName + '/filterpaged';
            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => response.json())
            .then(data => renderGrid(data))
            .catch(error => console.error(error));
        }

                       function renderGrid(data) {
            var pageSize = currentPayload.pager.pageSize;
            var currentPage = currentPayload.pager.pageNumber;
            var totalPages = Math.ceil(data.totalRecords / pageSize);
            var columns = [];
            if (data.items.length > 0) {
                columns = Object.keys(data.items[0]);
            }

            // Build header cells in an array.
            var headerCells = [];
            columns.forEach(function (col) {
                // Build cell content including sort arrow if this column is the active orderBy.
                var cellContent = col;
                if (currentPayload.orderBy.toLowerCase() === col.toLowerCase()) {
                    cellContent += currentPayload.desc ? " ▼" : " ▲";
                }
                // Push cell HTML with a data attribute.
                // If the column is "id", we want it always first; you could sort the headerCells array later.
                headerCells.push('<th style="cursor:pointer;" data-col="' + col + '">' + cellContent + '</th>');
            });

            var html = '<table class="table table-bordered"><thead><tr>' + headerCells.join('') + '</tr></thead><tbody>';

            data.items.forEach(function (item) {
                html += '<tr>' + columns.map(function (col) {
                    // Render long base64 images as image previews.
                    if (typeof item[col] === 'string' && item[col].length > 100 && item[col].startsWith("data:image")) {
                        return '<td><img src="' + item[col] + '" alt="Image" style="max-width:100px; max-height:100px;"></td>';
                    }
                    return '<td>' + item[col] + '</td>';
                }).join('') + '</tr>';
            });
            html += '</tbody></table>';
            html += '<div id="paginationControls" class="d-flex justify-content-center mt-2">' + renderPaginationControls(currentPage, totalPages) + '</div>';
            $("#gridContainer").html(html);

            // Attach event to each header cell to update the order.
            $("#gridContainer th[data-col]").on("click", function () {
                var clickedCol = $(this).data("col");
                // Toggle sort direction if the same column is clicked; otherwise, set new column and default sort.
                if (currentPayload.orderBy.toLowerCase() === clickedCol.toLowerCase()) {
                    currentPayload.desc = !currentPayload.desc;
                } else {
                    currentPayload.orderBy = clickedCol;
                    // Default new column sort direction; you can choose true or false as default.
                    currentPayload.desc = false;
                    debugger;
                    $("#orderByInput").val(clickedCol);
                    
                }
                currentPayload.pager.pageNumber = 1;
                loadGridData(currentControllerName, currentPayload);
            });

            attachPaginationEvents();
        }

        function renderPaginationControls(currentPage, totalPages) {
            if (totalPages <= 1) return "";
            var html = "";
            if (currentPage > 1) {
                html += '<button class="btn btn-sm btn-outline-primary mx-1" data-page="' + (currentPage - 1) + '">Previous</button>';
            }
            var start = Math.max(1, currentPage - 2);
            var end = Math.min(totalPages, currentPage + 2);
            if (start > 1) {
                html += '<button class="btn btn-sm btn-outline-primary mx-1" data-page="1">1</button>';
                if (start > 2) html += '<span class="mx-1">...</span>';
            }
            for (var i = start; i <= end; i++) {
                if (i === currentPage) {
                    html += '<button class="btn btn-sm btn-primary mx-1 active" data-page="' + i + '">' + i + '</button>';
                } else {
                    html += '<button class="btn btn-sm btn-outline-primary mx-1" data-page="' + i + '">' + i + '</button>';
                }
            }
            if (end < totalPages) {
                if (end < totalPages - 1) html += '<span class="mx-1">...</span>';
                html += '<button class="btn btn-sm btn-outline-primary mx-1" data-page="' + totalPages + '">' + totalPages + '</button>';
            }
            if (currentPage < totalPages) {
                html += '<button class="btn btn-sm btn-outline-primary mx-1" data-page="' + (currentPage + 1) + '">Next</button>';
            }
            return html;
        }

        function attachPaginationEvents() {
            $("#paginationControls button[data-page]").on("click", function () {
                var newPage = parseInt($(this).attr("data-page"));
                currentPayload.pager.pageNumber = newPage;
                loadGridData(currentControllerName, currentPayload);
            });
        }

        /****************************************************************
         * Query Editor and Auto-Refresh
         ****************************************************************/
        function applyQuery() {
            currentPayload.filter = $("#filterInput").val().trim() || "true";
            currentPayload.groupBy = $("#groupByInput").val().trim();
            currentPayload.select = $("#selectInput").val().trim();
            currentPayload.pager.pageNumber = 1;
            currentPayload.pager.pageSize = parseInt($("#pageSizeSelect").val());
            // Ensure default order is by id descending.
            currentPayload.orderBy = $("#orderByInput").val().trim() || "id";
            currentPayload.desc = true;
            if (currentControllerName) {
                loadGridData(currentControllerName, currentPayload);
            }
        }

        $("#btnApplyQuery").on("click", function () {
            applyQuery();
        });

        // Auto-Refresh with Countdown display.
        function startAutoRefresh() {
            var intervalSec = parseInt($("#refreshRate").val());
            if (isNaN(intervalSec) || intervalSec < 1) {
                alert("Please enter a valid refresh interval (minimum 1 second).");
                return;
            }
            var intervalMs = intervalSec * 1000;
            if (refreshTimer) clearInterval(refreshTimer);
            if (refreshCountdownTimer) clearInterval(refreshCountdownTimer);
            var remaining = intervalSec;
            $("#refreshCountdown").text("Next refresh in: " + remaining + " sec");
            refreshCountdownTimer = setInterval(function () {
                remaining--;
                $("#refreshCountdown").text("Next refresh in: " + remaining + " sec");
                if (remaining <= 0) remaining = intervalSec;
            }, 1000);
            refreshTimer = setInterval(function () {
                loadGridData(currentControllerName, currentPayload);
            }, intervalMs);
            alert("Auto-refresh started every " + intervalSec + " seconds.");
        }

        $("#btnStartRefresh").on("click", function () {
            startAutoRefresh();
        });

        $("#btnStopRefresh").on("click", function () {
            if (refreshTimer) {
                clearInterval(refreshTimer);
                refreshTimer = null;
            }
            if (refreshCountdownTimer) {
                clearInterval(refreshCountdownTimer);
                refreshCountdownTimer = null;
            }
            $("#refreshCountdown").text("");
            alert("Auto-refresh stopped.");
        });

        /****************************************************************
         * Saved Queries Functionality
         ****************************************************************/
        function loadSavedQueries(area) {
            renderSavedQueries(area);
        }

        function renderSavedQueries(area) {
            var queries = savedQueries[area] || [];
            var html = '<div id="savedQueriesPanel" class="draggable-panel" style="max-height:200px; overflow-y:auto; padding:5px;">';
            html += '<h6>Saved Queries for ' + area.toUpperCase() + '</h6>';
            if (queries.length === 0) {
                html += '<p>No saved queries.</p>';
            } else {
                html += '<ul class="list-group">';
                queries.slice(0, 5).forEach(function (q, idx) {
                    html += '<li class="list-group-item saved-query-item" data-index="' + idx + '">';
                    html += '<strong>' + q.name + '</strong><br>';
                    html += 'Filter: ' + q.filter + '<br>';
                    html += 'GroupBy: ' + q.groupBy + '<br>';
                    html += 'Select: ' + q.select;
                    html += '</li>';
                });
                html += '</ul>';
            }
            $("#savedQueriesBar").html(html + '<button id="btnSaveQuery" class="btn btn-sm btn-outline-primary float-end">Save Query</button>');
            $("#savedQueriesPanel").draggable();
            $(".saved-query-item").on("click", function () {
                var idx = $(this).data("index");
                var q = savedQueries[currentArea][idx];
                $("#filterInput").val(q.filter);
                $("#groupByInput").val(q.groupBy);
                $("#selectInput").val(q.select);
                applyQuery();
            });
            // Reattach save event.
            $("#btnSaveQuery").off("click").on("click", function () {
                var queryName = prompt("Enter a name for this query:");
                if (!queryName) return;
                var queryObj = {
                    name: queryName,
                    filter: $("#filterInput").val().trim() || "true",
                    groupBy: $("#groupByInput").val().trim(),
                    select: $("#selectInput").val().trim(),
                    orderBy: "id", // Always order by id descending.
                    desc: true
                };
                if (!savedQueries[currentArea]) savedQueries[currentArea] = [];
                savedQueries[currentArea].push(queryObj);
                renderSavedQueries(currentArea);
            });
        }

        /****************************************************************
         * Initialization
         ****************************************************************/
        $(document).ready(function () {
            renderAreaMenu();
            // If only one area exists, auto-select it.
            var areas = $(".area-group");
            if (areas.length === 1) {
                currentArea = $(areas[0]).data("area");
                $(".area-title", areas[0]).css("color", "#007bff");
            }
        });
    </script>
}
