@{
    Layout = null;
}
@using LinqApi.Dynamic.Controller
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Linq API Dashboard</title>
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.min.css" />
    <style>
        .select2-example {
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <!-- Top Navigation Bar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="bi bi-speedometer2"></i> LINQ Dashboard
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
                    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" target="_blank" href="https://help.linqapi.com">
                            <i class="bi bi-question-circle"></i> Help
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Layout -->
    <div class="d-flex" style="height: calc(100vh - 56px);">
        <!-- Sidebar -->
        <div class="border-end bg-light" style="width: 250px; overflow-y: auto;">
            <ul class="list-group list-group-flush">
                <li class="list-group-item p-2 bg-secondary text-white">Linq API Menu</li>
                @foreach (var api in LinqApiRegistry.Apis)
                {
                    <li class="list-group-item">
                        <a href="#" class="text-dark linq-api-link" data-entity="@api.EntityName"
                           data-routeprefix="@api.RoutePrefix.Replace("[controller]", "")">
                            <i class="bi bi-table"></i> @api.EntityName
                        </a>
                    </li>
                }
            </ul>
        </div>
        <!-- Main Content -->
        <div class="flex-grow-1 p-3" style="overflow-y: auto;">
            <!-- Tabs Navigation -->
            <ul class="nav nav-tabs" id="mainTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="grid-tab" data-bs-toggle="tab" data-bs-target="#gridTab" type="button" role="tab" aria-controls="gridTab" aria-selected="true">
                        Grid & QueryBuilder
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="select2-tab" data-bs-toggle="tab" data-bs-target="#select2Tab" type="button" role="tab" aria-controls="select2Tab" aria-selected="false">
                        Select2 Examples
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="chart-tab" data-bs-toggle="tab" data-bs-target="#chartTab" type="button" role="tab" aria-controls="chartTab" aria-selected="false">
                        Chart Examples
                    </button>
                </li>
            </ul>

            <!-- Tabs Content -->
            <div class="tab-content" id="mainTabContent">
                <!-- Grid & QueryBuilder Tab -->
                <div class="tab-pane fade show active" id="gridTab" role="tabpanel" aria-labelledby="grid-tab">
                    <div id="queryBuilderContainer" class="mb-3"></div>
                    <div id="dataTableContainer"></div>
                </div>

                <!-- Select2 Tab -->
                <div class="tab-pane fade" id="select2Tab" role="tabpanel" aria-labelledby="select2-tab">
                    <div class="alert alert-warning d-none" id="select2-warning">
                        Lütfen önce sol menüden bir entity seçin.
                    </div>
                    <h5 class="mt-3">Server-Fetched Select2 Components</h5>
                    <div class="select2-example">
                        <strong>Single Selection (Render: Grid)</strong>
                        <div id="server-grid-single"></div>
                    </div>
                    <div class="select2-example">
                        <strong>Multi Selection (Render: Grid)</strong>
                        <div id="server-grid-multi"></div>
                    </div>
                    <div class="select2-example">
                        <strong>Multi Selection (Render: Tag)</strong>
                        <div id="server-tag-multi"></div>
                    </div>
                    <hr />
                    <h5 class="mt-4">Client-Side (Static Data) Select2 Component</h5>
                    <div class="select2-example">
                        <strong>Single Selection (Client Mode, Grid)</strong>
                        <div id="client-grid-single"></div>
                    </div>
                </div>

                <!-- Chart Examples Tab -->
                <div class="tab-pane fade" id="chartTab" role="tabpanel" aria-labelledby="chart-tab">
                    <h5 class="mt-3">Chart Examples</h5>
                    <p>Here you can display chart examples. (Content will be added soon.)</p>
                    <!-- You can later add your chart components, e.g., using Chart.js or another library -->
                </div>
            </div>
        </div>
    </div>

    <!-- Include Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Module Script -->
    <script type="module">
          import { LinqDataTable } from '/_content/LinqApi.Razor/js/index.js';
        import { defaults } from '/_content/LinqApi.Razor/js/index.js';
        import { LinqSelect2 } from '/_content/LinqApi.Razor/js/index.js';


        let currentEntity = null;
        let dtInstance = null;

        // loadEntity: Opens the grid view for the selected entity.
        function loadEntity(entityName, routePrefix) {
            currentEntity = entityName;

            // Clear the datatable container in the Grid tab.
            const dtContainer = document.getElementById("dataTableContainer");
            dtContainer.innerHTML = "";

            const qbContainer = document.getElementById("queryBuilderContainer");
            qbContainer.innerHTML = "";

            dtInstance = new LinqDataTable({
                controller: entityName,
                queryBuilderContainer: qbContainer,
                container: dtContainer,
                apiPrefix: routePrefix || defaults.apiPrefix,
                autoCreateQueryBuilder: true,
                select2Columns: true
            });
        }

                function initSelect2Components() {
            if (!currentEntity) {
                console.warn("Önce soldan bir entity seçin.");
                return;
            }

            // Suppose dtInstance.entityProperties holds the fetched properties for the current entity.
            // Try to extract displayProperties if defined.
            let displayProp = ["name"]; // default fallback
            if (dtInstance && dtInstance.entityProperties) {
                const dpItem = dtInstance.entityProperties.find(p =>
                    typeof p.type === "string" && p.type.toLowerCase() === "displayproperty"
                );
                if (dpItem && Array.isArray(dpItem.properties) && dpItem.properties.length > 0) {
                    displayProp = dpItem.properties;
                } else {
                    // Fallback: if "name" doesn't exist in the schema, use "id"
                    const nameProp = dtInstance.entityProperties.find(p => p.name.toLowerCase() === "name");
                    displayProp = nameProp ? ["name"] : ["id"];
                }
            }

            const commonServerConfig = {
                container: null,
                controller: currentEntity,
                apiPrefix: defaults.apiPrefix,
                searchProperty: "name",
                // Use the computed displayProp array for the displayProperty setting.
                displayProperty: displayProp,
                valueField: "id",
                multiselect: false,
                fetchMode: "server",
                renderMode: "grid",
            };

            new LinqSelect2({
                ...commonServerConfig,
                container: document.getElementById("server-grid-single"),
                multiselect: false,
                renderMode: "grid",
            });

            new LinqSelect2({
                ...commonServerConfig,
                container: document.getElementById("server-grid-multi"),
                multiselect: true,
                renderMode: "grid",
            });

            new LinqSelect2({
                ...commonServerConfig,
                container: document.getElementById("server-tag-multi"),
                multiselect: true,
                renderMode: "tag",
            });

            // Client-side example (static data):
            new LinqSelect2({
                container: document.getElementById("client-grid-single"),
                fetchMode: "client",
                renderMode: "grid",
                searchProperty: "name",
                displayProperty: displayProp,
                valueField: "id",
                localData: [
                    { id: 1, name: "Item One" },
                    { id: 2, name: "Item Two" },
                    { id: 3, name: "Item Three" },
                ],
                multiselect: false,
            });
        }


        // Sidebar click events: When a link is clicked, loadEntity() is called.
        document.querySelectorAll(".linq-api-link").forEach(link => {
            link.onclick = (e) => {
                e.preventDefault();
                const entity = link.dataset.entity;
                const prefix = link.dataset.routeprefix;
                loadEntity(entity, prefix);
            };
        });

        // Initialize Select2 components when the Select2 tab is clicked.
        document.getElementById("select2-tab").onclick = initSelect2Components;

        // On page load, auto-click the first entity link if available.
        document.addEventListener("DOMContentLoaded", () => {
            const defaultLink = document.querySelector(".linq-api-link");
            if (defaultLink) defaultLink.click();
        });
    </script>
</body>
</html>
