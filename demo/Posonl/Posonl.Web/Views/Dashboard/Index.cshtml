<!-- Example: Include Bootstrap 5 CSS and Bootstrap Icons CDN -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

<div id="dataTableContainer"></div>


<script>
    document.addEventListener("DOMContentLoaded", () => {
        const container = document.getElementById("dataTableContainer");
        const dt = new DynamicDataTable({
            controller: "Country",
            container: container,
            apiPrefix: "/api",
            enableCreate: true,
            enableUpdate: true,
            enableHamburgerLinq: true,
            enableIntellisense: false,
            vmMode: true,
            debug: true
        });
        dt.init(); // triggers fetch schema, fetch data, render


            // Örnek 1: Grid Render – Tek sütun ("Name")
    // - Tek seçim modunda, kullanıcı Country "Name" alanı üzerinden arama yapıyor.
    // - filterSuffix örneğinde "1=1" kullanılarak tüm kayıtlar getirilebilir.
    const gridContainer1 = document.getElementById("country-grid-container-1");
    const countrySelectGrid1 = new LinqASelect2({
      container: gridContainer1,
      url: "/api/Country/filterpaged",
      searchProperty: "Name",            // Arama için Name alanı kullanılacak
      displayProperty: "Name",           // Dropdown ve seçili alanda Name gösterilecek
      valueField: "Id",
      filterSuffix: "1=1",               // Örneğin tüm kayıtları çekmek için
      pageSize: 10,
      debounceDuration: 500,
      multiselect: false,                // Tek seçim modunda
      showPropertyHeader: false,         // Grid render modunda header gerekmez
      initialData: null,                 // Başlangıç verisi yoksa backend'den çekilecek
      stateManager: {
        getState: () => ({}),
        setState: (s) => console.log("State updated (Grid1):", s),
        subscribe: () => {}
      }
    });


    // Örnek 2: Tag Render – Tek sütun ("Code")
    // - Multiselect true, kullanıcı Country "Code" alanına göre arama yapacak.
    // - Seçilenler tag şeklinde gösterilecek.
    const tagContainer1 = document.getElementById("country-tag-container-1");
    const countrySelectTag1 = new LinqASelect2Tag({
      container: tagContainer1,
      url: "/api/Country/filterpaged",
      searchProperty: "Code",            // Arama için Code alanı kullanılacak
      displayProperty: "Code",           // Tag'lerde Code gösterilecek
      valueField: "Id",
      filterSuffix: "1=1",               // Örneğin tüm kayıtları çekmek için
      pageSize: 10,
      debounceDuration: 500,
      multiselect: true,                 // Çoklu seçim modunda
      showPropertyHeader: false,
      initialData: null,                 // Başlangıç verisi yoksa backend'den çekilecek
      stateManager: {
        getState: () => ({}),
        setState: (s) => console.log("State updated (Tag1):", s),
        subscribe: () => {}
      }
    });


    // Örnek 3: Grid Render – Çok sütun (["Name", "Code"])
    // - Multiselect true; dropdown içerisinde arama, ve seçilen öğeler grid (tablo) şeklinde gösterilecek.
    // - Grid render modunda header (sütun isimleri) da gösterilecek.
    const gridContainer2 = document.getElementById("country-grid-container-2");
    const countrySelectGrid2 = new LinqASelect2({
      container: gridContainer2,
      url: "/api/Country/filterpaged",
      searchProperty: "Name",            // Arama yine Name alanına göre yapılacak
      displayProperty: ["Name", "Code"], // Hem Name hem Code sütunları gösterilecek
      valueField: "Id",
      filterSuffix: "1=1",               // Gerekirse filtre ekleyebilirsiniz, örn: "IsActive=True"
      pageSize: 10,
      debounceDuration: 500,
      multiselect: true,                 // Çoklu seçim modunda
      showPropertyHeader: true,          // Header (sütun başlıkları) gösterilecek
      // Initial data: Eğer dışarıdan bir dizi ya da tek obje gönderilecekse,
      // örneğin daha önce seçili ülkeler:
      initialData: [
        // Örneğin, { Id: 1, Name: "Türkiye", Code: "TR" },
        //           { Id: 2, Name: "Almanya", Code: "DE" }
      ],
      stateManager: {
        getState: () => ({}),
        setState: (s) => console.log("State updated (Grid2):", s),
        subscribe: () => {}
      }
    });


    // Örnek 4: Tag Render – Initial Data ile Tek Seçim
    // - Eğer dışarıdan initial data veriliyorsa, component ilk render edildiğinde
    //   bu veriyi seçili gösterecek. Bu örnekte tek seçim modunda.
    const tagContainer2 = document.getElementById("country-tag-container-2");
    const initialCountry = { Id: 3, Name: "Fransa", Code: "FR" };
    const countrySelectTag2 = new LinqASelect2Tag({
      container: tagContainer2,
      url: "/api/Country/filterpaged",
      searchProperty: "Name",
      displayProperty: "Name",
      valueField: "Id",
      filterSuffix: "1=1",
      pageSize: 10,
      debounceDuration: 500,
      multiselect: false,                // Tek seçim modunda
      showPropertyHeader: false,
      initialData: initialCountry,       // Başlangıçta Fransa seçili gelecek
      stateManager: {
        getState: () => ({}),
        setState: (s) => console.log("State updated (Tag2):", s),
        subscribe: () => {}
      }
    });

    }); // ← EKLENDİ!
</script>

