name: Build, Pack, and Publish NuGet Package

# Trigger this workflow when a tag starting with "v" is pushed (e.g., v1.0.0)
on:
  push:
    tags:
      - 'v*'  # Herhangi bir 'v' ile başlayan tag ile tetiklenir (v1.0.0 gibi)

jobs:
  build-pack-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        # Repository'yi checkout yaparak workflow'un koda erişmesini sağlıyoruz
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        # .NET SDK (8.0.x) kuruyoruz
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'  # Projenizin hedeflediği .NET sürümünü buraya yazdık

      - name: Extract Version from Git Tag
        id: extract_version
        run: |
          # Git tag'den versiyonu çıkartıyoruz (v1.0.0 -> 1.0.0)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Restore Dependencies
        # Projenin bağımlılıklarını restore ediyoruz
        run: dotnet restore src/Core/LinqApi/LinqApi.csproj

      - name: Build LinqApi Project
        # Projeyi derliyoruz, ancak ekstra restore işlemi yapmıyoruz
        run: dotnet build src/Core/LinqApi/LinqApi.csproj --configuration Release --no-restore

      - name: Pack NuGet Package
        # Projeyi NuGet paketine dönüştürüyoruz, ancak yeniden build yapmıyoruz
        # Paket versiyonunu, Git tag'inden çıkardığımız versiyonla dinamik olarak belirliyoruz
        run: dotnet pack src/Core/LinqApi/LinqApi.csproj --configuration Release --no-build -o ./nupkg /p:PackageVersion=${{ env.VERSION }}

      - name: Publish NuGet Package
        # Oluşturduğumuz NuGet paketini GitHub Packages'a yayımlıyoruz
        run: dotnet nuget push ./nupkg/*.nupkg --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}
