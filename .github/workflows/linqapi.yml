name: Build, Pack, and Publish NuGet Package

# Trigger this workflow when a tag starting with "v" is pushed (e.g., v1.0.0)
on:
  push:
    tags:
      - 'v*'

jobs:
  build-pack-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        # Checkout the repository so the workflow has access to your code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        # Install the .NET SDK (using version 8.0.x as your project targets net8.0)
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Extract Version from Git Tag
        id: extract_version
        run: |
          # Remove the "refs/tags/v" prefix from the Git tag to extract the version number
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Restore Dependencies
        # Restore NuGet dependencies for the LinqApi project
        run: dotnet restore src/Core/LinqApi/LinqApi.csproj

      - name: Build LinqApi Project
        # Build the project using the Release configuration without an additional restore step
        run: dotnet build src/Core/LinqApi/LinqApi.csproj --configuration Release --no-restore

      - name: Pack NuGet Package
        # Package the project into a NuGet package without rebuilding (using --no-build)
        # The PackageVersion is set dynamically using the version extracted from the Git tag
        run: dotnet pack src/Core/LinqApi/LinqApi.csproj --configuration Release --no-build -o ./nupkg /p:PackageVersion=${{ env.VERSION }}

      - name: Push NuGet Package
        # Push the generated NuGet package to nuget.org
        # Make sure to add your NuGet API key to your repository secrets as NUGET_API_KEY
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
